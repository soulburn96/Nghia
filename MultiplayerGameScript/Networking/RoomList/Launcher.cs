using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

/// <summary>
/// Class representing player's profile
/// </summary>
public class ProfileData {

    public string username;
	public int actorID;
    public short kills;
    public short deaths;

    public ProfileData() {
        username = null;
		actorID = 0;
        kills = 0;
        deaths = 0;
    }

    public ProfileData (string username, int actorID, short kills, short deaths) {
        this.username = username;
		this.actorID = actorID;
		this.kills = kills;
		this.deaths = deaths;
    }

	public ProfileData(ProfileData p) {
		username = p.username;
		actorID = p.actorID;
		kills = p.kills;
		deaths = p.deaths;
	}
}

/// <summary>
/// Class controlling multiplayer connection
/// </summary>
public class Launcher : MonoBehaviourPunCallbacks {

	#region references

	// current player's profile
	public static ProfileData myProfile = new ProfileData();

	public bool AutoConnect = true;
    public InputField usernameInputField;

	public Button JoinRandomButton;
	public Button RoomListButton;
	public Button SetupPlayerInfoButton;

	#endregion

	#region functions

	public void Awake() {
		if(!PhotonNetwork.IsConnected) {
			JoinRandomButton.interactable = false;
			RoomListButton.interactable = false;
			SetupPlayerInfoButton.interactable = false;

			// Autoconnection at startup of the scene
			if (AutoConnect) {
				Connect();
			}
		}
	}

	// Function connecting to the server
	public void Connect() {
		// Syncs scenes accross all players connected to the same room
		PhotonNetwork.AutomaticallySyncScene = true;
		PhotonNetwork.GameVersion = "1.0.0";
		// Connects to the game server;
		PhotonNetwork.ConnectUsingSettings();
	}

	// Callback received after connecting to the server
	public override void OnConnectedToMaster() {
		SetupPlayerInfoButton.interactable = true;
		// Autmatically join the lobby
		PhotonNetwork.JoinLobby();
		base.OnConnectedToMaster();
	}

	// Function to join a room
	public void Join() {
		PhotonNetwork.JoinRandomRoom();
	}

	// Function that joins the specific room chosen in room list
	public void JoinRoom(string roomName) {
		PhotonNetwork.JoinRoom(roomName);
	}

	// if Room found AND joined, start game
	public override void OnJoinedRoom() {
		StartGame();
		base.OnJoinedRoom();
	}

	// Function used to setup player profile
	public void SetupPlayerInfo() {
		JoinRandomButton.interactable = true;
		RoomListButton.interactable = true;
		VerifyUsername();
	}

	// Function assingning random name to the player if he didn't write any himself
	void VerifyUsername() {
		if (string.IsNullOrEmpty(usernameInputField.transform.Find("Text").GetComponent<Text>().text)) {
			myProfile.username = "RandomUser" + Random.Range(1000, 9999);
		} else {
			myProfile.username = usernameInputField.text;
		}
		usernameInputField.text = myProfile.username;
	}

	// Function called after joining the room loding the game scene
	public void StartGame() {
		while (!PhotonNetwork.InRoom);
		SceneManager.LoadScene("NetworkingScene");
    }

	// Function callback received after not finding any room used to create new one
	public override void OnJoinRandomFailed(short returnCode, string message) {
		CreateGameRoom();
		base.OnJoinRandomFailed(returnCode, message);
	}

	// Function creating new room
	public void CreateGameRoom() {
		string name = gameObject.GetComponent<MultiplayerMenu>().createRoomName.GetComponent<Text>().text;
		if(string.IsNullOrEmpty(name) || string.IsNullOrWhiteSpace(name)) {
			name = $"AutoGeneratedRoom{Random.Range(100,999)}";
		}

		RoomOptions options = new RoomOptions();
		options.MaxPlayers = byte.Parse(gameObject.GetComponent<MultiplayerMenu>().roomMaxPlayers.GetComponent<Text>().text);

		PhotonNetwork.CreateRoom(name, options);
	}

	public void Disconnect() {
		PhotonNetwork.Disconnect();
	}

	#endregion
}
